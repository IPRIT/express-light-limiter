{"version":3,"sources":["Storehouse.js"],"names":["isDebug","debug","log","Storehouse","quantum","zones","Map","timers","_quantum","ip","get","userZone","findUserZone","createUserZone","getAddress","addUserZone","set","delete","getId","deleteDestroyTimer","detachUserZone","dispose","size","ms","DESTROY_TIMEOUT","timeoutId","setTimeout","destroyUserZone","setDestroyTimer","findDestroyTimer","clearTimeout","length","QUANTUM","REQUESTS_PER_QUANTUM"],"mappings":";;;;;;qjBAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;AAEA,IAAMA,UAAU,KAAhB;AACA,IAAMC,QAAQ,SAARA,KAAQ;AAAA;;AAAA,SAAaD,WAAW,qBAAQE,GAAR,2BAAxB;AAAA,CAAd;;IAEqBC,U;AAIa;;AAFT;AAOvB,sBAAYC,OAAZ,EAAqB;AAAA;;AAAA,SAHrBC,KAGqB,GAHb,IAAIC,GAAJ,EAGa;AAAA,SAFrBC,MAEqB,GAFZ,IAAID,GAAJ,EAEY;;AACnB,SAAKE,QAAL,GAAgBJ,OAAhB;AACD;;;;iCAEYK,E,EAAI;AACf,aAAO,KAAKJ,KAAL,CAAWK,GAAX,CAAeD,EAAf,CAAP;AACD;;;yCAEoBA,E,EAAI;AACvB,UAAIE,WAAW,KAAKC,YAAL,CAAkBH,EAAlB,CAAf;AACA,UAAI,CAACE,QAAD,IAAa,EAAEA,sCAAF,CAAjB,EAAkD;AAChDA,mBAAW,KAAKE,cAAL,CAAoBJ,EAApB,CAAX;AACD;AACD,aAAOE,QAAP;AACD;;;qCAEgBA,Q,EAAU;AACzB,aAAO,KAAKJ,MAAL,CAAYG,GAAZ,CAAgBC,SAASG,UAAT,EAAhB,CAAP;AACD;;;mCAEcL,E,EAAI;AACjBR,YAAM,gBAAN,EAAwBQ,EAAxB;AACA,UAAIE,WAAW,uBAAaF,EAAb,EAAiB,KAAKD,QAAtB,CAAf;AACA,WAAKO,WAAL,CAAiBJ,QAAjB;AACA,aAAOA,QAAP;AACD;;;gCAEWA,Q,EAAU;AACpB,WAAKN,KAAL,CAAWW,GAAX,CAAeL,SAASG,UAAT,EAAf,EAAsCH,QAAtC;AACD;;;mCAEcA,Q,EAAU;AACvB,WAAKN,KAAL,CAAWY,MAAX,CAAkBN,SAASG,UAAT,EAAlB;AACAb,YAAM,gBAAN,EAAwBU,SAASO,KAAT,EAAxB;AACA,aAAOP,QAAP;AACD;;;oCAEeA,Q,EAAU;AACxBV,YAAM,kBAAN,EAA0BU,SAASO,KAAT,EAA1B;AACA,WAAKC,kBAAL,CAAwBR,QAAxB;AACA,WAAKS,cAAL,CAAoBT,QAApB,EAA8BU,OAA9B;AACAV,iBAAW,IAAX;AACAV,wCAAgC,KAAKI,KAAL,CAAWiB,IAA3C,kBAA4D,KAAKf,MAAL,CAAYe,IAAxE;AACD;;;oCAEeX,Q,EAA2C;AAAA;;AAAA,UAAjCY,EAAiC,yDAA5BpB,WAAWqB,eAAiB;;AACzDvB,YAAM,wBAAN,EAAgCU,SAASO,KAAT,EAAhC;AACA,WAAKC,kBAAL,CAAwBR,QAAxB;AACA,UAAIc,YAAYC,WAAW,YAAM;AAC/B,cAAKC,eAAL,CAAqBhB,QAArB;AACD,OAFe,EAEbY,EAFa,CAAhB;AAGA,WAAKhB,MAAL,CAAYS,GAAZ,CAAgBL,SAASG,UAAT,EAAhB,EAAuCW,SAAvC;AACD;;;wCAEmBd,Q,EAA2C;AAAA,UAAjCY,EAAiC,yDAA5BpB,WAAWqB,eAAiB;;AAC7D,WAAKI,eAAL,CAAqBjB,QAArB,EAA+BY,EAA/B;AACD;;;uCAEkBZ,Q,EAAU;AAC3BV,YAAM,yBAAN,EAAiCU,SAASO,KAAT,EAAjC;AACA,UAAIO,YAAY,KAAKI,gBAAL,CAAsBlB,QAAtB,CAAhB;AACA,UAAIc,SAAJ,EAAe;AACb,aAAKlB,MAAL,CAAYU,MAAZ,CAAmBN,SAASG,UAAT,EAAnB;AACAgB,qBAAaL,SAAb;AACAxB,cAAM,wBAAN,EAAgCU,SAASO,KAAT,EAAhC;AACD;AACF;;;oCAEeP,Q,EAAU;AACxB,aAAO,CAAC,CAAC,KAAKkB,gBAAL,CAAsBlB,QAAtB,CAAT;AACD;;;4BAEO;AACN,aAAO,KAAKN,KAAL,CAAW0B,MAAlB;AACD;;;4BAEO;AAAA;AAAA;AAAA;;AAAA;AACN,6BAAqB,KAAK1B,KAA1B,8HAAiC;AAAA,cAAxBM,QAAwB;;AAC/B,eAAKgB,eAAL,CAAqBhB,QAArB;AACD;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP;;;;;;AAzFkBR,U,CAEZ6B,O,GAAU,I;AAFE7B,U,CAGZ8B,oB,GAAuB,E;AAHX9B,U,CAIZqB,e,GAAkB,K;kBAJNrB,U","file":"Storehouse.js","sourcesContent":["/* @preserve\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2016 Alexander Belov\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n\r\nimport UserZone from './UserZone';\r\n\r\nconst isDebug = false;\r\nconst debug = (...args) => isDebug && console.log(...args);\r\n\r\nexport default class Storehouse {\r\n  \r\n  static QUANTUM = 5000; // 5 sec.\r\n  static REQUESTS_PER_QUANTUM = 25;\r\n  static DESTROY_TIMEOUT = 10000; // 10 sec.\r\n  \r\n  zones = new Map();\r\n  timers = new Map();\r\n  \r\n  constructor(quantum) {\r\n    this._quantum = quantum;\r\n  }\r\n  \r\n  findUserZone(ip) {\r\n    return this.zones.get(ip);\r\n  }\r\n  \r\n  findOrCreateUserZone(ip) {\r\n    let userZone = this.findUserZone(ip);\r\n    if (!userZone || !(userZone instanceof UserZone)) {\r\n      userZone = this.createUserZone(ip);\r\n    }\r\n    return userZone;\r\n  }\r\n  \r\n  findDestroyTimer(userZone) {\r\n    return this.timers.get(userZone.getAddress());\r\n  }\r\n  \r\n  createUserZone(ip) {\r\n    debug('Creating zone:', ip);\r\n    let userZone = new UserZone(ip, this._quantum);\r\n    this.addUserZone(userZone);\r\n    return userZone;\r\n  }\r\n  \r\n  addUserZone(userZone) {\r\n    this.zones.set(userZone.getAddress(), userZone);\r\n  }\r\n  \r\n  detachUserZone(userZone) {\r\n    this.zones.delete(userZone.getAddress());\r\n    debug('Zone detached:', userZone.getId());\r\n    return userZone;\r\n  }\r\n  \r\n  destroyUserZone(userZone) {\r\n    debug('Zone destroying:', userZone.getId());\r\n    this.deleteDestroyTimer(userZone);\r\n    this.detachUserZone(userZone).dispose();\r\n    userZone = null;\r\n    debug(`Zone destroyed. Zones: ${this.zones.size}; Timers: ${this.timers.size}`);\r\n  }\r\n  \r\n  setDestroyTimer(userZone, ms = Storehouse.DESTROY_TIMEOUT) {\r\n    debug('Destroy timer was set:', userZone.getId());\r\n    this.deleteDestroyTimer(userZone);\r\n    let timeoutId = setTimeout(() => {\r\n      this.destroyUserZone(userZone);\r\n    }, ms);\r\n    this.timers.set(userZone.getAddress(), timeoutId);\r\n  }\r\n  \r\n  refreshDestroyTimer(userZone, ms = Storehouse.DESTROY_TIMEOUT) {\r\n    this.setDestroyTimer(userZone, ms);\r\n  }\r\n  \r\n  deleteDestroyTimer(userZone) {\r\n    debug('Destroy timer deleting:', userZone.getId());\r\n    let timeoutId = this.findDestroyTimer(userZone);\r\n    if (timeoutId) {\r\n      this.timers.delete(userZone.getAddress());\r\n      clearTimeout(timeoutId);\r\n      debug('Destroy timer deleted:', userZone.getId());\r\n    }\r\n  }\r\n  \r\n  hasDestroyTimer(userZone) {\r\n    return !!this.findDestroyTimer(userZone);\r\n  }\r\n  \r\n  count() {\r\n    return this.zones.length;\r\n  }\r\n  \r\n  clear() {\r\n    for (let userZone of this.zones) {\r\n      this.destroyUserZone(userZone);\r\n    }\r\n  }\r\n}"],"sourceRoot":"/source/"}